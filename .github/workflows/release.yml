name: 'C++ CI'

on: 
  push:
    branches:
      - master

jobs:
  build_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      
      # Установка SFML
      - name: Install SFML
        id: sfml
        uses: oprypin/install-sfml@v1
        with:
          sfml: 2.6.1  # Укажите нужную версию SFML
          config: Release
      
      # Настройка CMake
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }} -DSFML_DIR=${{ steps.sfml.outputs.path }}
      - run: cmake --build .
      - run: cmake --build . --target package
      
      # Создание релиза и загрузка артефактов
      - name: Create Release (windows)
        id: create_release_windows
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: windows${{ github.run_number }}
          release_name: Release ${{ github.run_number }} (windows)
          draft: false
          prerelease: false

      - name: Upload Release Asset (windows)
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_windows.outputs.upload_url }}
          asset_path: ./physics-0.0.${{ github.run_number }}-win64.zip
          asset_name: physics-0.0.${{ github.run_number }}-win64.zip
          asset_content_type: application/zip
  
  build_ubuntu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      
      # Установка SFML на Ubuntu (можно использовать apt-get)
      - name: Install SFML on Ubuntu
        run: sudo apt-get install libsfml-dev
      
      # Настройка CMake для Ubuntu
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      - run: cmake --build . --target package
      
      # Создание релиза и загрузка артефактов для Ubuntu
      - name: Create Release (ubuntu)
        id: create_release_ubuntu
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ubuntu${{ github.run_number }}
          release_name: Release ${{ github.run_number }} (ubuntu)
          draft: false
          prerelease: false 

      - name: Upload Release Asset (ubuntu)
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_ubuntu.outputs.upload_url }}
          asset_path: ./physics-0.0.${{ github.run_number }}-Linux.zip
          asset_name: physics-0.0.${{ github.run_number }}-Linux.zip
          asset_content_type: application/zip
